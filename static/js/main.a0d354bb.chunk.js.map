{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","monster","className","name","src","id","alt","CardList","monsters","map","key","SearchBox","placeholder","handleChange","value","type","onChange","App","handleClick3","console","log","state","searchField","bind","handleClick2","handleClick1","fetch","then","response","json","setState","e","this","target","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6VAGaA,G,kBAAO,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACrB,OACE,yBAAKC,UAAU,kBACb,4BAAKD,EAAQE,MACb,yBAAKC,IAAG,+BAA0BH,EAAQI,GAAlC,aAAiDC,IAAKL,EAAQE,UCH/DI,EAAW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACzB,OACE,yBAAKN,UAAU,aACZM,EAASC,KAAI,SAACR,GAAD,OACZ,kBAAC,EAAD,CAAMA,QAASA,EAASS,IAAKT,EAAQI,UCLhCM,G,MAAY,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,YAAaC,EAA0B,EAA1BA,aAA0B,EAAZC,MACrD,OACE,2BACEZ,UAAU,SACVU,YAAaA,EACbG,KAAK,OAELC,SAAUH,MCyCDI,E,YA7Cb,aAAe,IAAD,8BACZ,+CAsBFC,aAAe,kBAAMC,QAAQC,IAAI,kBAAZ,iBArBnB,EAAKC,MAAQ,CACXb,SAAU,CAAC,CAAEL,KAAM,GAAIE,GAAI,KAC3BiB,YAAa,IAEf,EAAKT,aAAe,EAAKA,aAAaU,KAAlB,gBACpB,EAAKC,aAAe,EAAKC,aAAaF,KAAlB,gBAPR,E,iFAUO,IAAD,OAClBG,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACnB,GAAD,OAAc,EAAKsB,SAAS,CAAEtB,kB,mCAG3BuB,GACXC,KAAKF,SAAS,CAAER,YAAaS,EAAEE,OAAOnB,U,qCAItCK,QAAQC,IAAI,kBAAmBY,Q,+BAIvB,IAAD,OACP,OACE,yBAAK9B,UAAU,OACb,gDACA,kBAAC,EAAD,CACEa,KAAK,OACLH,YAAY,kBAEZC,aAAcmB,KAAKnB,eAErB,kBAAC,EAAD,CACEL,SAAUwB,KAAKX,MAAMb,SAAS0B,QAAO,SAACjC,GAAD,OACnCA,EAAQE,KAAKgC,cAAcC,SAAS,EAAKf,MAAMC,YAAYa,yB,GAtCrDE,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.a0d354bb.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = ({ monster }) => {\n  return (\n    <div className=\"card-container\">\n      <h2>{monster.name}</h2>\n      <img src={`https://robohash.org/${monster.id}?set=set2`} alt={monster.name} />\n    </div>\n  );\n};\n","import React from 'react';\nimport './card-list.styles.css';\nimport { Card } from '../card/card.component';\n\nexport const CardList = ({ monsters }) => {\n  return (\n    <div className=\"card-list\">\n      {monsters.map((monster) => (\n        <Card monster={monster} key={monster.id} />\n      ))}\n    </div>\n  );\n};\n","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange, value }) => {\n  return (\n    <input\n      className=\"search\"\n      placeholder={placeholder}\n      type=\"text\"\n      // value={value}\n      onChange={handleChange}\n    />\n  );\n};\n","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [{ name: '', id: '' }],\n      searchField: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick2 = this.handleClick1.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then((monsters) => this.setState({ monsters }));\n  }\n\n  handleChange(e) {\n    this.setState({ searchField: e.target.value });\n  }\n\n  handleClick1() {\n    console.log('button1 clicked', this);\n  }\n  handleClick3 = () => console.log('button3 clicked', this);\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          type=\"text\"\n          placeholder=\"Search monsters\"\n          // value={this.state.searchField}\n          handleChange={this.handleChange}\n        />\n        <CardList\n          monsters={this.state.monsters.filter((monster) =>\n            monster.name.toLowerCase().includes(this.state.searchField.toLowerCase())\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}